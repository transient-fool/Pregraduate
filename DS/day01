#include <iostream>
#include <stack>
#include <string>
#include <vector>
#include <stdexcept>
#include <cmath>

using namespace std;

// 判断是否为运算符
bool isOperator(const string& token) {
    return token == "+" || token == "-" || token == "*" || token == "/" || token == "^";
}

// 执行二元运算
double applyOperation(double a, double b, const string& op) {
    if (op == "+") return a + b;
    if (op == "-") return a - b;
    if (op == "*") return a * b;
    if (op == "/") {
        if (b == 0) throw runtime_error("除零错误");
        return a / b;
    }
    if (op == "^") return pow(a, b);
    throw runtime_error("无效运算符: " + op);
}

// 计算后缀表达式
double evaluatePostfix(const vector<string>& tokens) {
    stack<double> s;
    
    for (const auto& token : tokens) {
        if (isOperator(token)) {
            if (s.size() < 2) throw runtime_error("操作数不足");
            double b = s.top(); s.pop();
            double a = s.top(); s.pop();
            s.push(applyOperation(a, b, token));
        } else {
            try {
                s.push(stod(token));
            } catch (...) {
                throw runtime_error("无效数字: " + token);
            }
        }
    }
    
    if (s.size() != 1) throw runtime_error("表达式无效");
    return s.top();
}

// 测试函数
void runTests() {
    vector<pair<vector<string>, double>> testCases = {
        {{"3", "4", "2", "*", "+"}, 11},          // 3 + 4 * 2 = 11
        {{"3", "4", "+", "2", "*"}, 14},          // (3 + 4) * 2 = 14
        {{"5", "3", "2", "^", "+"}, 14},          // 5 + 3^2 = 14
        {{"10", "2", "/", "3", "+"}, 8},          // 10 / 2 + 3 = 8
        {{"4", "2", "5", "*", "+", "1", "3", "2", "*", "+", "/"}, 2}, // (4 + 2*5)/(1 + 3*2) = 2
        {{"15", "7", "1", "1", "+", "-", "/", "3", "*", "2", "1", "1", "+", "+", "-"}, 5} // ((15/(7-(1+1)))*3-(2+(1+1)) = 5
    };
    
    cout << "后缀表达式求值测试:\n";
    cout << "----------------------------\n";
    
    for (size_t i = 0; i < testCases.size(); ++i) {
        const auto& testCase = testCases[i];
        cout << "测试用例 " << i+1 << ": ";
        for (const auto& token : testCase.first) {
            cout << token << " ";
        }
        cout << "\n预期结果: " << testCase.second << endl;
        
        try {
            double result = evaluatePostfix(testCase.first);
            cout << "计算结果: " << result;
            if (abs(result - testCase.second) < 1e-9) {
                cout << " ✓ 通过\n";
            } else {
                cout << " ✗ 失败\n";
            }
        } catch (const exception& e) {
            cout << "错误: " << e.what() << " ✗ 失败\n";
        }
        cout << "----------------------------\n";
    }
}

int main() {
    runTests();
    return 0;
}
